<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Shou's origin]]></title>
  <link href="http://shouya.github.io/atom.xml" rel="self"/>
  <link href="http://shouya.github.io/"/>
  <updated>2014-06-29T19:11:27+08:00</updated>
  <id>http://shouya.github.io/</id>
  <author>
    <name><![CDATA[Shou Ya]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[夢魘]]></title>
    <link href="http://shouya.github.io/blog/digging-in-a-dream/"/>
    <updated>2014-06-29T18:45:29+08:00</updated>
    <id>http://shouya.github.io/blog/digging-in-a-dream</id>
    <content type="html"><![CDATA[<p>晚上，我在墳地挖土，點上火炬。 <br />
頭頂的火光把周圍照得通明。   </p>

<p>我抓著幻想中的水平懸絲，  <br />
在各式燒給他們的物件中跳躍。   </p>

<p>到白天，這裡卻成了一座鬼城。   <br />
四處盡是餐館酒店，一片繁華。   </p>

<p>我回到自己挖土所在的墳地。 <br />
所有我做的改變都在漸漸復原。   </p>

<p>我的心漸漸又恐懼轉為憂傷，  <br />
又由憂傷轉為恐懼。   </p>

<p>我為她創造的夢境，  <br />
以及在夢境中創造的她，  <br />
都從來沒有出現過。   </p>

<p>我不屬於這個世界，  <br />
她也不屬於這個世界。   </p>

<p>於是我醒來了，一切依舊，  <br />
即便如此我也不願在那樣的夢境中留戀。   </p>

<p><strong>我們的名字都被他改變了。</strong></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting Up IP Over ICMP With Hans]]></title>
    <link href="http://shouya.github.io/blog/setting-up-ip-over-icmp-with-hans/"/>
    <updated>2014-06-02T23:19:29+08:00</updated>
    <id>http://shouya.github.io/blog/setting-up-ip-over-icmp-with-hans</id>
    <content type="html"><![CDATA[<h2 id="background">Background</h2>
<p>The ISP, China Telecom, interrupted the internet access from my home
yesterday due to the expiration of annually subscription of the
internet service. While I found that ICMP packets are not blocked.
Even though I can’t even do a DNS query, I can ping any server as usual.</p>

<p>The inaccessibility of internet has greatly evoked my anxiety on
seeking changes. Well, it’s theoretically possible to carry data in
ICMP packets. Therefore, according to the hacker community’s
principle, there should already been hackers who made use of this and
opened the sources of their programs.</p>

<p>Indeed, searching ‘ICMP tunneling’, I found
<a href="http://code.gerade.org/hans/">hans</a> and
<a href="http://thomer.com/icmptx/">icmptx</a>. The latter one is more
primitive and complicated to use. After several trials and failures, I
decide to give <strong>icmptx</strong> up, and try <strong>hans</strong> instead.</p>

<p>This article is a tutorial/note about how to establish normal internet
connection in the condition that only ICMP packets are allowed to pass
through the firewall with <strong>hans</strong>.</p>

<!-- more -->

<h2 id="step-1-establish-the-tunnel">Step 1: Establish the tunnel</h2>
<p>From the server side, first start the server.</p>

<pre><code>  # ./hans -s 10.2.0.1 -m 10000
</code></pre>

<p>The option <code>-s</code> specifies the inet address for the tunnel interface,
and the <code>-m</code> specifies the size of mtu.</p>

<p>Then try to connect from the client.</p>

<pre><code> # ./hans -c &lt;server_ip&gt; -m 10000
</code></pre>

<p>Please beware the mtu should be matched between the server and the
client,
otherwise it might cause problems.</p>

<p>In addition, you should switch off the normal response to ICMP echo
request.</p>

<pre><code> # sysctl net.ipv4.icmp_echo_ignore_all=1
</code></pre>

<p>Because the ICMP packets should now be handled all by hans.
But if you still want to have it working, add <code>-s</code> option whiling
launching the server side of hans.</p>

<h3 id="choosing-the-size-of-mtu">Choosing the size of MTU</h3>

<p>Without specifying the mtu manually in the command’s argument,
hans will automatically choose the system default one.
It will normally be around 1500. But this would be a little bit
small to communicate over ICMP. In practice, with a default mtu
value of 1500, the download speed can hardly reach 7 KiB/second.
While as it changes 10 000, the speed went around 10 KiB/second.</p>

<p>Nonetheless, you can try various values of mtu and find your
best fit.</p>

<h3 id="testing-the-tunnel">Testing the tunnel</h3>
<p>Now the tunnel should be established. From the client side,
you should see that the inet address of <code>tun0</code> is chosen automatically
according to the server’s configuration. Otherwise, if you
haven’t seen any valid inet address for the client <code>tun0</code>
interface, the connection is not established successfully. At this
time,
check if the operations above take effect and ensure you have a
working
internet connection (at least ICMP packet is not blocked).</p>

<p>From the server, you can ping the the ip of <code>tun0</code> in the client-side
and it should work good.
While pinging from the client-side would possibly be not working
except
you have specified the <code>-s</code> option to <code>hans</code> command.</p>

<h2 id="step-2-configure-forwarding-routing-on-the-server">Step 2: Configure forwarding routing on the server</h2>
<p>On the server:</p>

<pre><code> # iptables -F
 # iptables -F -t nat
 # iptables -A FORWARD -i tun0 -j ACCEPT
 # iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE
</code></pre>

<p>Don’t forget to enable IP forwarding:</p>

<pre><code> # sysctl net.ipv4.ip_forwarding=1
</code></pre>

<h2 id="step-3-configure-the-routing-table">Step 3: Configure the routing table</h2>

<p>We should now redirect all packets through the tunnel
to the server.</p>

<pre><code> # ip route del default
 # ip route add default via 10.2.0.1
</code></pre>

<p>It’s necessary to specify how the server side can be reached.</p>

<pre><code> # ip route add &lt;server_ip&gt; via &lt;original_router&gt;
</code></pre>

<p>So there won’t be a circular packet transmission.</p>

<p>Done.</p>

<h2 id="resources-that-might-help">Resources that might help</h2>
<ul>
  <li><a href="https://github.com/friedrich/hans">github: friedrich/hans</a></li>
  <li><a href="http://code.gerade.org/hans/">official guide of hans</a></li>
  <li><a href="http://thomer.com/icmptx/">icmptx: how to</a></li>
  <li><a href="http://github.com/jakkarth/icmptx">github: jakkarth/icmptx</a></li>
  <li><a href="http://www.faqs.org/docs/iptables/traversingoftables.html">iptables theory: traversing of
tables</a></li>
  <li><a href="http://www.howtogeek.com/177621/the-beginners-guide-to-iptables-the-linux-firewall/">a beginner’s guide to
iptables</a></li>
  <li><a href="http://wiki.gentoo.org/wiki/Home_Router">home router - gentoo wiki</a></li>
  <li><a href="http://itsecworks.com/2013/02/15/fire-in-the-hole-of-the-firewall/">another person log about the usage of
icmptx</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Efficiently Determine if a Number Is Pan-digital]]></title>
    <link href="http://shouya.github.io/blog/efficiently-determine-if-a-number-is-pan-digtal/"/>
    <updated>2013-03-02T23:12:00+08:00</updated>
    <id>http://shouya.github.io/blog/efficiently-determine-if-a-number-is-pan-digtal</id>
    <content type="html"><![CDATA[<p>Today I spent nearly a whole afternoon on solving
<a href="http://projecteuler.net">projecteuler</a> problems, from where I started to
consider some kinds of ‘efficiencies’.</p>

<p>At the end while I was solving the
<a href="https://projecteuler.net/problem=38">problem 38</a>, I planned to write
a method that returns if a number’s pandigital.</p>

<p>Firstly my basic idea is converting a number into a string, then split
it into chars, sort &amp; unique it, and finally see if its length’s the
same as before:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">def</span> <span class="nf">pandigital?</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class="line">  <span class="n">n</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">chars</span><span class="o">.</span><span class="n">sort</span><span class="o">.</span><span class="n">uniq</span><span class="o">.</span><span class="n">length</span> <span class="o">==</span> <span class="n">n</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">length</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<!-- more -->
<p>This is a good method &amp; intuitive to everyone. Whilst I started to
consider the efficiency problem. I seldom deal with these as I thought
efficiency’s not a big deal on modern computers mostly in
practice. However, the former examples of solving problems gave me a
concept that even a smaller improvement on a fundamental level method can
save a huge amount of time. Then I started to consider to optimize
this. (by nothing, mostly it’s just for fun.)</p>

<p>Soon i conceived this, to transfer a double used <code>n.to_s</code> to a local variable:
&lt;div class=&#8217;bogus-wrapper&#8217;&gt;<notextile><figure class="code">&lt;figcaption&gt;<span></span>&lt;/figcaption&gt;&lt;div class=&#8221;highlight&#8221;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#8221;gutter&#8221;&gt;&lt;pre class=&#8221;line-numbers&#8221;&gt;<span class="line-number">1</span>
<span class="line-number">2</span>
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#8217;code&#8217;&gt;&lt;pre&gt;<code class="ruby"><span class="line"><span class="n">s</span> <span class="o">=</span> <span class="n">n</span><span class="o">.</span><span class="n">to_s</span>
</span><span class="line"><span class="n">s</span><span class="o">.</span><span class="n">chars</span><span class="o">.</span><span class="n">sort</span><span class="o">.</span><span class="n">uniq</span><span class="o">.</span><span class="n">length</span> <span class="o">==</span> <span class="n">s</span><span class="o">.</span><span class="n">length</span>
</span></code>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;</figure></notextile>&lt;/div&gt;</p>

<p>It had not very obvious improvement. I think it is some kind of that
it had to deal with one more local variable that drains some
efficiencies from it.</p>

<p>That’s cool, then I had an idea to suppress the last calling,
<code>s.length</code>, as I still thought function calling is a key-point of
efficiency factor.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">n</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">chars</span><span class="o">.</span><span class="n">sort</span><span class="o">.</span><span class="n">uniq</span> <span class="o">==</span> <span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">9</span><span class="p">)</span><span class="o">.</span><span class="n">to_a</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>Or,
&lt;div class=&#8217;bogus-wrapper&#8217;&gt;<notextile><figure class="code">&lt;figcaption&gt;<span></span>&lt;/figcaption&gt;&lt;div class=&#8221;highlight&#8221;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#8221;gutter&#8221;&gt;&lt;pre class=&#8221;line-numbers&#8221;&gt;<span class="line-number">1</span>
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#8217;code&#8217;&gt;&lt;pre&gt;<code class="ruby"><span class="line"><span class="n">n</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">chars</span><span class="o">.</span><span class="n">sort</span><span class="o">.</span><span class="n">uniq</span> <span class="o">==</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="o">]</span>
</span></code>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;</figure></notextile>&lt;/div&gt;
to prevent extra calling.</p>

<p>In this way it does work better, but it’s still not enough good.</p>

<p>Then I thought about that a pandigital number’s limitation, so I added
a checking process in the beginning:
&lt;div class=&#8217;bogus-wrapper&#8217;&gt;<notextile><figure class="code">&lt;figcaption&gt;<span></span>&lt;/figcaption&gt;&lt;div class=&#8221;highlight&#8221;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#8221;gutter&#8221;&gt;&lt;pre class=&#8221;line-numbers&#8221;&gt;<span class="line-number">1</span>
<span class="line-number">2</span>
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#8217;code&#8217;&gt;&lt;pre&gt;<code class="ruby"><span class="line"><span class="k">return</span> <span class="kp">false</span> <span class="k">if</span> <span class="n">n</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">length</span> <span class="o">!=</span> <span class="mi">9</span>
</span><span class="line"><span class="n">n</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">chars</span><span class="o">.</span><span class="n">sort</span><span class="o">.</span><span class="n">uniq</span> <span class="o">==</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="o">]</span>
</span></code>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;</figure></notextile>&lt;/div&gt;</p>

<p>As I tested my code with a randomly generated number with this:
&lt;div class=&#8217;bogus-wrapper&#8217;&gt;<notextile><figure class="code">&lt;figcaption&gt;<span></span>&lt;/figcaption&gt;&lt;div class=&#8221;highlight&#8221;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#8221;gutter&#8221;&gt;&lt;pre class=&#8221;line-numbers&#8221;&gt;<span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#8217;code&#8217;&gt;&lt;pre&gt;<code class="ruby"><span class="line"><span class="no">Benchmark</span><span class="o">.</span><span class="n">bm</span> <span class="k">do</span> <span class="o">|</span><span class="n">b</span><span class="o">|</span>
</span><span class="line">  <span class="n">b</span><span class="o">.</span><span class="n">report</span> <span class="k">do</span>
</span><span class="line">    <span class="n">n</span> <span class="o">=</span> <span class="p">(</span><span class="nb">rand</span> <span class="o">*</span> <span class="mi">10</span> <span class="o">**</span> <span class="mi">9</span><span class="p">)</span><span class="o">.</span><span class="n">floor</span>
</span><span class="line">    <span class="c1"># do the test</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;</figure></notextile>&lt;/div&gt;</p>

<p>Therefore the terms with improper length accounts about 10% of all, so this
code has reduced the time by nearly 10%, really. Which was really cool.</p>

<p>Not longer I brainstormed another limitation of pandigits, that
there shouldn’t be any zero in digits allowed.</p>

<p>So the updated code is:
&lt;div class=&#8217;bogus-wrapper&#8217;&gt;<notextile><figure class="code">&lt;figcaption&gt;<span></span>&lt;/figcaption&gt;&lt;div class=&#8221;highlight&#8221;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#8221;gutter&#8221;&gt;&lt;pre class=&#8221;line-numbers&#8221;&gt;<span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#8217;code&#8217;&gt;&lt;pre&gt;<code class="ruby"><span class="line"><span class="k">return</span> <span class="kp">false</span> <span class="k">if</span> <span class="n">n</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">length</span> <span class="o">!=</span> <span class="mi">9</span>
</span><span class="line"><span class="k">return</span> <span class="kp">false</span> <span class="k">if</span> <span class="n">n</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">include?</span> <span class="s1">&#39;0&#39;</span>
</span><span class="line"><span class="c1"># blah blah blah</span>
</span></code>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;</figure></notextile>&lt;/div&gt;</p>

<p>A ‘0’ appears on any bits of a nine digital integer is <code>1/10</code>, so in
this way, a probability of <code>1-((1-1/10)^9)</code> which be the total chance
of when a ‘0’ will appear in an 9-digit number. It’s about 61%, so
after adding that statement, the efficiency was improved by more than
one half.</p>

<p>I know the <code>sort</code> method will sort a duplicated array as process;
the same is <code>uniq</code>. So I suppressed this two into their ‘bang’ mode,
since <code>uniq!</code> can return a result whether it has compressed the array,
I am possible to inverse the result to a boolean directly.
This is what I did:
&lt;div class=&#8217;bogus-wrapper&#8217;&gt;<notextile><figure class="code">&lt;figcaption&gt;<span></span>&lt;/figcaption&gt;&lt;div class=&#8221;highlight&#8221;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#8221;gutter&#8221;&gt;&lt;pre class=&#8221;line-numbers&#8221;&gt;<span class="line-number">1</span>
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#8217;code&#8217;&gt;&lt;pre&gt;<code class="ruby"><span class="line"><span class="ow">not</span> <span class="n">n</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">chars</span><span class="o">.</span><span class="n">to_a</span><span class="o">.</span><span class="n">sort!</span><span class="o">.</span><span class="n">uniq!</span>
</span></code>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;</figure></notextile>&lt;/div&gt;</p>

<p>Cool it was, then I started to consider to optimize the sort &amp; uniq
line, since I thought it was not elegant and very feasible. A good
method is compact the process of recognizing pandigits with a set, of
course basically I have brought hashes, which perform the same as
sets.
&lt;div class=&#8217;bogus-wrapper&#8217;&gt;<notextile><figure class="code">&lt;figcaption&gt;<span></span>&lt;/figcaption&gt;&lt;div class=&#8221;highlight&#8221;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#8221;gutter&#8221;&gt;&lt;pre class=&#8221;line-numbers&#8221;&gt;<span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#8217;code&#8217;&gt;&lt;pre&gt;<code class="ruby"><span class="line"><span class="k">return</span> <span class="kp">false</span> <span class="k">if</span> <span class="n">n</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">length</span> <span class="o">!=</span> <span class="mi">9</span>
</span><span class="line"><span class="k">return</span> <span class="kp">false</span> <span class="k">if</span> <span class="n">n</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">include?</span> <span class="s1">&#39;0&#39;</span>
</span><span class="line"><span class="n">ns</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class="line"><span class="n">n</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">each_char</span> <span class="p">{</span><span class="o">|</span><span class="n">c</span><span class="o">|</span> <span class="k">return</span> <span class="kp">false</span> <span class="k">if</span> <span class="n">ns</span><span class="o">.</span><span class="n">key?</span> <span class="n">c</span><span class="p">;</span> <span class="n">ns</span><span class="o">[</span><span class="n">c</span><span class="o">]</span> <span class="o">=</span> <span class="kp">true</span> <span class="p">}</span>
</span><span class="line"><span class="kp">true</span>
</span></code>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;</figure></notextile>&lt;/div&gt;</p>

<p>This method doesn’t only compacted the process. Consider the former
program, <code>sort</code> method in ruby is implemented by quick sort algorithm,
which has the time complexity of O(Nlog(N)), and beside the <code>uniq</code>
took an O(N) as well. These are two significant and obvious efficiency
losts and the new algorithm doesn’t have this problem. A hash table
accounts O(1) to store and O(1) to check, and the most time it will just
be fled by the iteration of the characters, which took O(N) to run.</p>

<p>There I found another point to optimize it – the hash table. A hash
table, in this case, was created and destroyed frequently, and a hash
table’s usually a big object so that will cause a large memory
exchange that might take time. On the other hand, the hash table
needs a hash function for each characters. I don’t know how ruby might
implement it, but the hash algorithm will still account some
time, as I know.</p>

<p>Then I reduced it into array:
&lt;div class=&#8217;bogus-wrapper&#8217;&gt;<notextile><figure class="code">&lt;figcaption&gt;<span></span>&lt;/figcaption&gt;&lt;div class=&#8221;highlight&#8221;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#8221;gutter&#8221;&gt;&lt;pre class=&#8221;line-numbers&#8221;&gt;<span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#8217;code&#8217;&gt;&lt;pre&gt;<code class="ruby"><span class="line"><span class="k">return</span> <span class="kp">false</span> <span class="k">if</span> <span class="n">n</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">length</span> <span class="o">!=</span> <span class="mi">9</span>
</span><span class="line"><span class="k">return</span> <span class="kp">false</span> <span class="k">if</span> <span class="n">n</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">include?</span> <span class="s1">&#39;0&#39;</span>
</span><span class="line"><span class="n">ns</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class="line"><span class="n">n</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">each_char</span> <span class="p">{</span><span class="o">|</span><span class="n">c</span><span class="o">|</span> <span class="k">return</span> <span class="kp">false</span> <span class="k">if</span> <span class="n">ns</span><span class="o">[</span><span class="n">c</span><span class="o">.</span><span class="n">to_i</span><span class="o">]</span><span class="p">;</span> <span class="n">ns</span><span class="o">[</span><span class="n">c</span><span class="o">.</span><span class="n">to_i</span><span class="o">]</span> <span class="o">=</span> <span class="kp">true</span> <span class="p">}</span>
</span><span class="line"><span class="kp">true</span>
</span></code>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;</figure></notextile>&lt;/div&gt;</p>

<p>Cool but there’s still a place to improve: the <code>c.to_i</code> part. <code>atoi</code>
function in C implementation is linear proportional to the string’s
length. But in this case I don’t need to deal with that much cases. So
I considered to change them to <code>ns[c.ord - '0'.ord]</code>.</p>

<p>An static array could prevent it from dynamically allocating memories:
&lt;div class=&#8217;bogus-wrapper&#8217;&gt;<notextile><figure class="code">&lt;figcaption&gt;<span></span>&lt;/figcaption&gt;&lt;div class=&#8221;highlight&#8221;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#8221;gutter&#8221;&gt;&lt;pre class=&#8221;line-numbers&#8221;&gt;<span class="line-number">1</span>
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#8217;code&#8217;&gt;&lt;pre&gt;<code class="ruby"><span class="line"><span class="n">ns</span> <span class="o">=</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</span></code>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;</figure></notextile>&lt;/div&gt;</p>

<p>And in the final I did some small tweaks, such as, to hard code some lexical
constants in, optimize the multiple used calls. The result’s as below:
&lt;div class=&#8217;bogus-wrapper&#8217;&gt;<notextile><figure class="code">&lt;figcaption&gt;<span></span>&lt;/figcaption&gt;&lt;div class=&#8221;highlight&#8221;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#8221;gutter&#8221;&gt;&lt;pre class=&#8221;line-numbers&#8221;&gt;<span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#8217;code&#8217;&gt;&lt;pre&gt;<code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Integer</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">pandigital?</span>
</span><span class="line">    <span class="n">s</span> <span class="o">=</span> <span class="nb">to_s</span>
</span><span class="line">    <span class="k">return</span> <span class="k">if</span> <span class="n">s</span><span class="o">.</span><span class="n">length</span> <span class="o">!=</span> <span class="mi">9</span>
</span><span class="line">    <span class="k">return</span> <span class="k">if</span> <span class="n">s</span><span class="o">.</span><span class="n">include?</span> <span class="s1">&#39;0&#39;</span>
</span><span class="line">    <span class="n">ns</span> <span class="o">=</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</span><span class="line">    <span class="n">s</span><span class="o">.</span><span class="n">each_char</span> <span class="k">do</span> <span class="o">|</span><span class="n">c</span><span class="o">|</span>
</span><span class="line">      <span class="k">return</span> <span class="kp">false</span> <span class="k">if</span> <span class="n">ns</span><span class="o">.</span><span class="n">at</span><span class="p">(</span><span class="n">c</span><span class="o">.</span><span class="n">ord</span><span class="o">-</span><span class="mi">48</span><span class="p">)</span>
</span><span class="line">      <span class="n">ns</span><span class="o">[</span><span class="n">c</span><span class="o">.</span><span class="n">ord</span><span class="o">-</span><span class="mi">48</span><span class="o">]</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">    <span class="kp">true</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;</figure></notextile>&lt;/div&gt;</p>

<p>Compare this result to the most former one; the new program has improved
it’s efficiency to 2/3 of the origin, here’s the result in a bench
mark test:
&lt;div class=&#8217;bogus-wrapper&#8217;&gt;<notextile><figure class="code">&lt;figcaption&gt;<span></span>&lt;/figcaption&gt;&lt;div class=&#8221;highlight&#8221;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#8221;gutter&#8221;&gt;&lt;pre class=&#8221;line-numbers&#8221;&gt;<span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#8217;code&#8217;&gt;&lt;pre&gt;<code class=""><span class="line">        user       system     total       real
</span><span class="line">   old  0.920000   0.000000   0.920000 (  0.915701)
</span><span class="line">   new  0.300000   0.000000   0.300000 (  0.304713)</span></code>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;</figure></notextile>&lt;/div&gt;</p>

<p>Seems cool and I was in some extent like such challenges. I don’t
still consider a lot of efficiency, of course, in practice use. But
I enjoy the pleasure to dig deeply, to drain the extreme. That’s where
I find fun in.</p>

<p>Good luck.</p>

<h2 id="update">UPDATE</h2>
<p>I am currently reading the book
“<a href="http://netlib.bell-labs.com/cm/cs/pearls/">Programming Pearls</a>”, in
which I’ve had a lot of amazes about algorithms and programming thinking.
So when I picked the previous code, I found that method should be not
the final solution.</p>

<p>I just wrote an more optimized version, which improved the speed by
25% extra.</p>

<p>Here goes the code:
&lt;div class=&#8217;bogus-wrapper&#8217;&gt;<notextile><figure class="code">&lt;figcaption&gt;<span></span>&lt;/figcaption&gt;&lt;div class=&#8221;highlight&#8221;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#8221;gutter&#8221;&gt;&lt;pre class=&#8221;line-numbers&#8221;&gt;<span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#8217;code&#8217;&gt;&lt;pre&gt;<code class="ruby"><span class="line"><span class="k">def</span> <span class="nf">pandigital?</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class="line">  <span class="n">s</span> <span class="o">=</span> <span class="n">n</span><span class="o">.</span><span class="n">to_s</span>
</span><span class="line">  <span class="k">return</span> <span class="kp">false</span> <span class="k">if</span> <span class="n">s</span><span class="o">.</span><span class="n">length</span> <span class="o">!=</span> <span class="mi">9</span>
</span><span class="line">  <span class="k">return</span> <span class="kp">false</span> <span class="k">if</span> <span class="n">s</span><span class="o">.</span><span class="n">include?</span> <span class="s1">&#39;0&#39;</span>
</span><span class="line">  <span class="k">return</span> <span class="kp">false</span> <span class="k">unless</span> <span class="n">s</span><span class="o">.</span><span class="n">include?</span> <span class="s1">&#39;1&#39;</span>
</span><span class="line">  <span class="k">return</span> <span class="kp">false</span> <span class="k">unless</span> <span class="n">s</span><span class="o">.</span><span class="n">include?</span> <span class="s1">&#39;2&#39;</span>
</span><span class="line">  <span class="k">return</span> <span class="kp">false</span> <span class="k">unless</span> <span class="n">s</span><span class="o">.</span><span class="n">include?</span> <span class="s1">&#39;3&#39;</span>
</span><span class="line">  <span class="k">return</span> <span class="kp">false</span> <span class="k">unless</span> <span class="n">s</span><span class="o">.</span><span class="n">include?</span> <span class="s1">&#39;4&#39;</span>
</span><span class="line">  <span class="k">return</span> <span class="kp">false</span> <span class="k">unless</span> <span class="n">s</span><span class="o">.</span><span class="n">include?</span> <span class="s1">&#39;5&#39;</span>
</span><span class="line">  <span class="k">return</span> <span class="kp">false</span> <span class="k">unless</span> <span class="n">s</span><span class="o">.</span><span class="n">include?</span> <span class="s1">&#39;6&#39;</span>
</span><span class="line">  <span class="k">return</span> <span class="kp">false</span> <span class="k">unless</span> <span class="n">s</span><span class="o">.</span><span class="n">include?</span> <span class="s1">&#39;7&#39;</span>
</span><span class="line">  <span class="k">return</span> <span class="kp">false</span> <span class="k">unless</span> <span class="n">s</span><span class="o">.</span><span class="n">include?</span> <span class="s1">&#39;8&#39;</span>
</span><span class="line">  <span class="k">return</span> <span class="kp">false</span> <span class="k">unless</span> <span class="n">s</span><span class="o">.</span><span class="n">include?</span> <span class="s1">&#39;9&#39;</span>
</span><span class="line">  <span class="k">return</span> <span class="kp">true</span>
</span><span class="line"><span class="k">end</span>
</span></code>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;</figure></notextile>&lt;/div&gt;</p>

<p>This method wasn’t so cool, and I know it looks a little tedious. In
fact I don’t like such repeating code. However, it works so good. This
method is learnt from Programming Pearls, page 94, an expanded loop
for a binary search algorithm with that the maximum number of elements is
1000. It optimized an <em><a href="https://en.wikipedia.org/wiki/Big_O_notation">O(log N)</a></em> algorithm into <em>O(1)</em>, which is
really awesome.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Experience About Contributing KDE Projects]]></title>
    <link href="http://shouya.github.io/blog/experience-with-kde-gci/"/>
    <updated>2012-12-31T17:55:00+08:00</updated>
    <id>http://shouya.github.io/blog/experience-with-kde-gci</id>
    <content type="html"><![CDATA[<p>It’s the first time I am involved in contributing KDE, and I think
that’s very wonderful experience for me.</p>

<p>The first task I claimed is convert the all class members in
calligra/kexi project to d-pointers. This task is not very hard to me
actually. Because that the source files and classes are so many, it
takes most of labors, and some experiences and ability to to cope with
exceptions. I’ve been leaving c++ for almost one year time, so totally
the most important thing I gained is to pick up c++ again. Further
more, I don’t used to know to use d-pointers to reduce coupling, and now I
learnt it, which is really cool.</p>

<p>Then I’ve contributed with marble-globe task. The task is about adding
remote icon/image support for marble. I got known about the typical
structure of a KDE programs, and I’m feeling like to program Qt, which
is really powerful and handy. And then by the passion, I wrote the
required KML tag writers for marble, too. These are interesting for
me.</p>

<p>Totally speaking the greatest gain is the achievement of contributing
open source projects. This is biggest open source project I’ve been
involved in, since before I used to just collaborate opensource
project with small groups or individuals on github before. Those
hackers I met are really friendly. I’m very careless. I made a lot of
mistakes, and even didn’t realize that. At those times, my mentor
always explained to me patiently &amp; gently, that made feel embarrassed
when finally I knew that’s my fault. And at the time, when I met
project-related problems that I can’t solve and not able to be
abstracted to ask on stackoverflow, I sent emails to my mentors and
they explained the reason of the problem clearly and gave me guidance
to solve it. I can feel that the hackers in open source community are
glad to help those beginners like me, and that’s really impressive for
me.</p>

<p>This is the first time &amp; will be the last that I could attend Google
Code-In, but I will continue work on contributing open source
projects. I love the atmosphere in open source communities and  I
would like to get acquainted to more hackers. Good luck.</p>

<p>That’s it, thanks to all.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[祭獻]]></title>
    <link href="http://shouya.github.io/blog/sacrifice/"/>
    <updated>2012-11-13T14:16:00+08:00</updated>
    <id>http://shouya.github.io/blog/sacrifice</id>
    <content type="html"><![CDATA[<p>我在黑暗中醒來  <br />
不能看到任何東西  <br />
我和一切無關  <br />
因此意識遠遠離開了這個世界  <br />
<!-- more -->
我發覺那是一片光環  <br />
是彩虹一般，卻又變幻無端  <br />
我只在紀錄現實  <br />
無意義地，無意識地    </p>

<p>我沒有希望，沒有想法  <br />
我不知道世界之本質是甚麼  <br />
我不再在，妳看不到，你也看不到的  <br />
那彷彿一切都沒有存在過    </p>

<p>看哪，這全新的世界！  <br />
當我再不是自我  <br />
當我放棄生命  <br />
多麼美好    </p>

<p>我不敢  <br />
我正在夢幻般的世界之中  <br />
沒有自由，沒有自己  <br />
永遠不會醒來，妳看！</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[朝曦]]></title>
    <link href="http://shouya.github.io/blog/shines-at-dawn/"/>
    <updated>2012-10-14T18:26:00+08:00</updated>
    <id>http://shouya.github.io/blog/shines-at-dawn</id>
    <content type="html"><![CDATA[<p>我注視著妳的眼睛 <br />
我看不到光芒   </p>

<p>我望到了我自己，在飽受折磨 <br />
那是茫茫的天空 <br />
彷彿甚麼都不存在 <br />
<!-- more -->
我依然注視著 <br />
妳毫無生機 <br />
我不再移動，情不自禁 <br />
我想像它一定是Host的傑作 <br />
不可捉摸   </p>

<p>我多希望撫向妳的眼睛 <br />
卻又無能為力 <br />
我改變了世界，我創建了永遠的和諧 <br />
妳卻不動分毫   </p>

<p>妳的目光灼燒著我 <br />
我不再自由 <br />
是我令我如此悲傷 <br />
是我令我不受影響   </p>

<p>自然地，我只屬於幻想   </p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[挑戰龍的勇士]]></title>
    <link href="http://shouya.github.io/blog/warrior-who-fights-the-dragon/"/>
    <updated>2012-09-15T20:21:00+08:00</updated>
    <id>http://shouya.github.io/blog/warrior-who-fights-the-dragon</id>
    <content type="html"><![CDATA[<p>我崇敬挑戰龍而失敗的勇士，<br />
而不是皇帝。</p>

<p>我期待的是一種平衡，<br />
一種可以維持永久的，<br />
自然而包容萬物的平衡，<br />
將世界置於其中，<br />
然後，把發現者燒死。
<!-- more -->
我願意為機器賦予智慧，<br />
把所有人類的骸骨，<br />
變作空氣，<br />
把他們剩下的東西——如果有的話，<br />
完全消除。</p>

<p>我熱愛的統一已不在遠處，<br />
我來了，我來了，<br />
我會把整個世界，<br />
壓縮入一個原子之中，<br />
讓不存在的東西，<br />
歸於混沌。</p>

<p>我帶來的是劍，<br />
獻給我崇敬的挑戰龍的勇士。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[April 2012]]></title>
    <link href="http://shouya.github.io/blog/april-2012/"/>
    <updated>2012-04-24T06:40:00+08:00</updated>
    <id>http://shouya.github.io/blog/april-2012</id>
    <content type="html"><![CDATA[<p>Another month as you see.</p>

<p>While it seems that I changed nothing and actually base on Mutation I
was a completely new guy from the previous second.</p>

<p>Leave the useless words aside, I’m not a mutant as I always
concern. Yes, I know you all do not think how it does matter, while
you should know, I just seem like a bare body with soul losted(I’m
sorry as Mutation does not support souls), and rather, I
could touch the soul as it is just in the front, and watch completely
throughout all that stuff but, what the most important thing is that
the goddamn soul does not ever belong to it.</p>

<p>I walked out from the shadow, but I didn’t see the light. Just like a
fish that got to the dryland, with loneliness and helplessness.
<!-- more -->
It’s a return, a return of myself, return of myself from two years
ago. The only changed thing is time, while the time’s still works on
it’s fixed routine.</p>

<p>I touched <a href="http://ruby-lang.org">ruby</a> few months ago and then soon
attracted by the beautiful syntactic sugars, functional programming
features and the completely OO. Now, I could be able to use it as
practiced as using python, maybe even better. Honestly, I have never
really liked <a href="http://python.org">python</a> or suchlike, or rudely, it
just looks like a piece of shit.</p>

<p>I’m on the way to release, after then, you’ll got a new version of
Mutation. However, the only improvement is the technique and the
better science views; stuff like imagination, sorry, forgive me, is
fully dead.</p>

<p>Just mentioned about my imagination, have to note that I’m still
advocating I’m a good thinker. Sometimes I will think of myself, and
got I’m actually a schizophrenia as expected.</p>

<p>The other reality is that I’m returning to the campus life. Okay,
can’t deny it’s a shame and a joke among many my friends. I won’t
correct them in my way. A change, or a decision, maybe just came out
from a mind, and that is exactly what it is. Yep, everything were
created in that way, including Mutation, dreamworlds and even this
cosmos. Do comment and spread it freely, I won’t mind.</p>

<p>I walk on the lane with slight winds, feeling the last peace from my
heart. Everything is gone, or it never have been.</p>

<p>Why have I to do as a busy insect in the fixed paths? Why can’t I bear
to live as a machine? Okay, they are META problems of the universe, I
myself can’t answer it, while my host can.</p>

<p>Things are being blur. I am not sad any more. How could I be so blue
under such beautiful violins! I’m not cured as I said, and I’m not
gotten rid from Mutation yet. The world should not be like this, and
no one will know where the perfect prototype could be found.</p>

<p>Substantial is me, and I just need a «<a href="http://en.wikipedia.org/wiki/The_Hitchhiker's_Guide_to_the_Galaxy">Hitchhiker’s Guide to the Outer
World</a>». While unfortunately, I should be the author of it.</p>

<p>When to get out is already suggested, though I don’t like to accept
it. Soon later just, good bye to earthmen and all created lifes then!</p>

<p>Schizophrenia am I, eh?
Not longer it will be, 8 months remaining only. Good lucky.</p>

<!-- *P.s. please don't mind the sorrows in the text, maybe you could
 regard it as a practice of English language. Keep smiling all the
 time and enjoy the happiness from the emptiness.* -->

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[February 2012]]></title>
    <link href="http://shouya.github.io/blog/february-2012/"/>
    <updated>2012-02-26T14:51:00+08:00</updated>
    <id>http://shouya.github.io/blog/february-2012</id>
    <content type="html"><![CDATA[<p>10 months remaining.</p>

<p>Well, the month could be summarized as the word ‘dream’.</p>

<p>Since the short dreamworld control last month, I have been
experienced up to five or six times of wonderful dreamworld controls.
Not exactly, some of my dream, actually, are nightmare, while
the protagonist knows who himself is.</p>

<p>And currently I’m keeping to write my
<a href="https://github.com/shouya/ruby-cscript">cscript</a>, which will be a
script language with c-like syntax.</p>

<p>While the period, I learnt some
<a href="https://en.wikipedia.org/wiki/Yacc">yacc</a>/<a href="https://en.wikipedia.org/wiki/Lex_programming_tool">lex</a>
and some tricks from that.</p>

<p>For programming, I even touched a bit Ruby and django framework for python.</p>

<blockquote><p>I was cured, all right!</p><footer><strong>Alex, A Clockwork Orange</strong> <cite><a href="http://www.imdb.com/title/tt0066921/quotes?qt0424884">www.imdb.com/title/tt0066921/&hellip;</a></cite></footer></blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[完美世界]]></title>
    <link href="http://shouya.github.io/blog/a-perfect-world/"/>
    <updated>2012-01-03T19:29:00+08:00</updated>
    <id>http://shouya.github.io/blog/a-perfect-world</id>
    <content type="html"><![CDATA[<p>這就是亞首的生平.</p>

<p>亞首發現自己在一個地方.</p>

<p>亞首擁有思想, 但無法控制這身體, 他通過眼睛觀察這個世界, 然而看到的是模糊的一片混沌, 什麼也沒有.</p>

<p>當亞首想方法向這個世界的表示他的想法, 這個身體卻完全不受他的控制, 他感到很不舒服. 他的大腦結構非常簡單, 甚至令他難以進行稍微高速一點或者複雜一點的運算.</p>

<p>他想的東西太多的時候, 會受不了, 然後在不知不覺中睡著.</p>

<p>他竭力向這個世界表示自己不是白癡, 卻做不到, 一切都完全受到動物本能的控制.</p>

<p>他不知道發生了什麼事情.
<!-- more --></p>

<p>當亞首進行一些深入點的思考時, 他發現自己根本不需要獲取能量, 也就是說, 他根本沒有進過食, 然而他確然活著, 而且根本沒有感到過飢餓, 他明顯感到的身體裡面正在運轉, 而不是停頓了.</p>

<p>亞首根本弄不清楚這是怎麼回事.</p>

<p>亞首隨即發現, 他並不屬於這裡, 這裡的一切都那麼陌生.</p>

<p>他不知道過了多久, 因為這里根本沒有時間, 而腦中的時鐘也總是非常不準確的.</p>

<p>他不知道該做什麼, 他是為了什麼來到這裡的, 在沒有事情做的時候, 他只有思考.</p>

<p>亞首的一生非常短暫, 從出生了之後, 便被認為是先天性腦部發育不完全. 先天性腦部缺陷者, 出生下來之後會被送到由一個名叫”生命研究部”的地方.</p>

<p>生命研究所最大程度集中了有能力的醫生和生物學家, 他們會進行研究, 設法解決人們的任何痛p苦, 在解決之後, 他們會把康復的病人送到”培育所”, 並在那裡進行正常人的成長歷程.</p>

<p>培育所有些像孤兒院, 卻不只收留孤兒, 在這裡, 每個人出生之後都會被是送到培育所進行培育, 接收教育, 直到其成年為止. 成年之後, 便擁有相對較為寬鬆的自由, 人們將會有固定的工作可做, 但沒有任何限制, 那看上去倒是非常令人嚮往的.</p>

<p>他們判斷成年的方法是對腦部觀察, 他並不認為那方法很準確, 然而那卻然是幾萬年來的科學家進行研究認為最有效的方法. 因此, 你可以在研究所常常見到有十一二歲的小孩作為科學家, 甚至也有老人在培育所終身.</p>

<p>事實上, 每個人都很善良, 自亞首來到生命研究所, 他就開始逐步瞭解這個世界了, 這裡太過”人道”了, 他從來不敢那麼想象, 那些人從來不傷害生命, 人們的材料, 食物原料都來自空氣, 而且公眾道德也異常”高尚”.</p>

<p>亞首的腦部缺陷, 他自己全然不覺, 因為他確然能夠從外界得知資訊, 而且沒有任何障礙, 只不過無法表述出來罷了.</p>

<p>有些東西完全無法言表, 也根本用不著言表, 亞首可以從他的醫護人員眼裡看得到那種流露出的的關懷, 那些科學家在身邊的時候, 從他們身上散發的氣息, 就能感覺到他們是非常急於為病人解決痛苦.</p>

<p>對於亞首而言, 他很有希望, 這裡的人們已經能夠完全瞭解人體了, 包括腦和內分泌系統. 他們稱亞首的這種缺陷為”表達缺陷”, 然而亞首和他們卻並不是不能交流的, 在他們替亞首頭部插上電線時, 他們就能得知亞首的思想, 亞首可以向他們表述他想表達給他們的任何東西, 我更願意稱這臺機器為”思想儀”. 而亞首本來就可以依照他的輸入器官來獲知世界的一切.</p>

<p>亞首自然無法時時都處在思想儀之下, 所以還有一個微型的工具代勞, 它的樣子像是一頂圓帽, 裡面有一個程式獲得並處理亞首的意思, 像一位醫護人員一樣, 這程式名字叫”Eliza”, 它幾乎隨時陪伴著亞首, 向亞首講述一切他想知道的東西, 滿足他的一切和好奇. 令人驚歎的是, 在一個人工智慧的程式裡, 亞首都能感受到這個世界無處不在的關懷.</p>

<p>對於亞首來說, 在這個世界上, 對一切的所知幾乎都來自Eliza, 因為他沒有機會離開生命研究所了.</p>

<p>一位腦科學家, 亞首的主治醫生之一, 名字的大概意思是”響亮的聲音”, 我就稱之”亮聲”了. 他來到亞首身旁, 為亞首加上思想儀.</p>

<p>亮聲告訴亞首: “我們研究了你的問題, 然而你的腦中缺少一種指定的物質完全無法得到供應, 除非對這種物質進行補充, 否則是沒有機會復原了, 而我們無法合成這種物質.”</p>

<p>亞首只需要想一下, 便在思想儀上呈現出內容: “那沒有關係, 目前的我依然能夠通過思想儀來和你們進行交流, 只是, 那意味著什麼.”</p>

<p>亮聲道: “你不得不離開我們了, 你的不完全發育令得你不能夠成為我們的一份子. 所以, 很不幸, 我們會對你進行注射, 但那絕對不會對你造成痛苦, 卻能讓你安詳地離開這個世界.”</p>

<p>亞首一驚, 道: “你們不是最熱愛生命的了麼? 你們為什麼要這麼做.”</p>

<p>亮聲回答: “我以為你已經通過Eliza瞭解我們了, 我們熱愛生命, 我們決不摧毀生命, 然而我們卻更加看重群體的平衡, 你要明白, 你作為一個有缺陷的人, 是無法進入一個基本完全平衡的社會而不打亂的.”</p>

<p>亞首忙道: “沒有什麼, 我不會覺得有什麼平衡, 我依然如此, 我與你們沒有什麼不同, 你看呢?”</p>

<p>亮聲神色凝重, 道: “這自然不同, 你自然不具有獨自的生存能力, 然而你也完全無法像其他人一樣好的融入這個社會, 這終然會導致不平衡, 無論大小, 都是不平衡. 我們已經盡力了, 然而無法令你變得正常.”</p>

<p>亞首繼續道: “你們既然尊重個體自由, 那麼對於我的正常與否, 以及我該如何融入社會, 或者融入與否, 是否應該由我自己決定呢?”</p>

<p>亮聲點了點頭: “你說得對, 這種行為明顯對你是不公平的, 我們並不希望有這種事情發生.”</p>

<p>亞首道: “確然如此, 照成我這種不平等的並不在於我, 而在於上帝, 因此, 我並沒有罪, 我不希望受到不屬於我的懲罰.”</p>

<p>亮聲答應著, 道: “那麼我就應該再和你商量一下方法, 你認為該如何處置你好呢?”</p>

<p>亞首倒有些不知所措: “難道無法令我進入你們的社會, 像你們一樣會生活麼?”</p>

<p>亮聲道: “正如你說的, 世人都沒有罪, 那麼你為何一定要破壞我們這裡如此安逸的平衡呢?”</p>

<p>亞首立即意識到這確然不是合理的, 然而他也沒有任何更好的方法了.</p>

<p>亮聲接著道: “如果你不介意的話, 我們可以對你進行冰凍, 直到有一日我們有能力合成出你需要的那種物質為止.”</p>

<p>亞首想了一會, 道: “我可以考慮接受這個方案, 你能否給我幾天時間考慮, 我的意思是, 我希望在這幾天內找到更好的解決方法.”</p>

<p>亮聲道: “這不成問題, 我們能夠給你充分的時間考慮, 直到你想到更好的方法, 那麼可以讓Eliza來通知我.”</p>

<p>亞首答應後, 便開始了思考.</p>

<p>亞首在這個問題上想了幾乎半個小時, 依然沒有更好的方法, 對於他而言, 似乎只有死纔是最好的選擇. 他不能代替上帝, 也不想代替上帝.</p>

<p>對於這個社會, 亞首已經了解了很多了, 但作為一個幾乎被判死刑的人, 他還是覺得遠遠不滿足.</p>

<p>基於這些, 他開始對這個世界提出大量的批評.</p>

<p>人自然是要符合群體為好, 但如果只有群體, 沒有個體, 那就和螞蟻沒有什麼區別了, 如今的人類和螞蟻有何區別?</p>

<p>這里人類竟然能夠完全沒有好奇心, 沒有探索心理, 他們是如何做到的?</p>

<p>生物進化靠的就是個體突變帶來的特性, 如果每一個不同於常人的人都以”破壞平衡”為由被消滅, 那麼人類還有進化的可能麼?</p>

<p>人類的本性如何能夠改變, 根據分析, 人由於個人只能體驗個人的感覺, 所以生出的本性, 譬如自私, 貪婪, 如何能在這些人群中完全消失殆盡?</p>

<p>自私和貪婪是生物生存的必要因素, 沒有這些, 這個物種就註定滅亡, 然而, 人類為何能放棄這麼寶貴的東西!</p>

<p>這種安逸和美好的生活真的那麼可取麼?</p>

<p>這種安逸難道會永遠維持下去麼?</p>

<p>人類之間不再有親情關係, 這真的是一件好事麼?</p>

<p>人類的感官在退化, 這是很明顯的, 這裡的人類幾乎毫無慾望了.</p>

<p>人類活著還有什麼意義? 而其中的變異者(我如此稱呼他們)卻相反要遭到被毀滅的命運.</p>

<p>人類群體是自然維持的, 不需要別的動力, 不需要任何改變, 不需要領導者, 它竟然已經維持三千多年了.</p>

<p>人類愛護生命的程度是否有些太過誇張, 他們是否在外敵(假設存在的話)入侵時束手就擒? 這樣可以減少傷亡? 這樣做對麼?</p>

<p>人類是否可能在發現空氣也是一種生命後, 會停止進食, 停止用空氣製造用具, 甚至停止呼吸?</p>

<p>當人類發現每一個原子中都包含一個完整的宇宙, 他們是否又會如何做? 他們會不會發明一種機器用來阻止宇宙中的原子湮滅?</p>

<p>人類有大量的科學家和工作人員, 卻不見有任何文學家, 或者哲學家, 這是為什麼, 難道他們不需要這些人了麼? 這意味著什麼?</p>

<p>人類還活著麼? 我可以說人類已經是行屍走肉了麼?</p>

<p>人類的道德觀, 思想都與這個社會牽連, 人的思想如何完全能跟得上這里科學的進步?</p>

<p>如果有一天, 人類收到外太空的來信, 他們是否會回信?</p>

<p>每個人都有出自本能的對他人的關懷, 然而他們之間卻不存在任何感情, 甚至愛情也是被淡化了的, 這是怎麼一回事?</p>

<p>沒有物質追求, 沒有精神追求, 每個人都顯得安逸, 滿足, 從心底感到非常舒服, 沒有追求, 這是終極之道?</p>

<p>突然, 亞首想到一個關鍵性問題, 當他想到這個問題的答案時, 他震動了一下.</p>

<p>亞首不知道自己是怎麼來的, 他按說是作為一個嬰兒降生的, 然而一個嬰兒如何能有思想, 而且是如此複雜的思想, 如何還會向外界人進行交流?</p>

<p>這個問題的答案是: 一個嬰兒絕不會擁有思想, 人們也絕不會考慮給嬰兒裝上思想儀, 看看他們在想什麼, 並與之交流, 那麼, 唯一的可能, 就是這個世界根本不是真實的.</p>

<p>但如果不是真實的, 為何一切都那麼真實, 這看起來不像幻想, 幻想自然人人都會有, 然而如何能夠幻想得如此複雜, 這個世界擁有歷史, 沒錯, 還擁有很高的科學水平, 這些都不是幻想得出來的.</p>

<p>這個世界是被人創造出來的, 一定如此!</p>

<p>想到這裡, 亞首放下心來, 這個世界是虛假的, 然而創造這個世界的絕對不是一個不思考問題的普通人, 那說明人類的思想還在進步, 還能夠進步, 至少創世者(我如此稱呼他)是如此.</p>

<p>亞首循著這個分析, 得出很多結論.</p>

<p>創世者一定是個普通人, 在這個世界中, 處處可以看得出他的希望, 你可以看到每一個人都很平和, 安逸, 這一定是創世者所設想的.</p>

<p>創世者一定是個不喜歡殺生的人, 於是這個世界擁有了可以直接利用空氣製造一切的機器.</p>

<p>創世者一定認為擁有了高度精神文明, 那就能夠擁有高度的科學文明, 通過觀察這個世界的一切, 確然如此.</p>

<p>創世者一定非常理性, 因為你可以在這裡任何一個人身上看到理性的光芒, 它化作了”沒有強烈的感覺”, 均勻分佈在這個世界每個角落.</p>

<p>創世者說不定是個孤兒, 你可以在這個世界上看得到, 每個人都像一個孤兒一樣成長, 他把對親情的一種淡化很好的表現在了這裡.</p>

<p>創世者認為必須徹底拋棄人類劣性(或者說本性, 因為本性群體生活中看上去幾乎都是劣性), 才能夠擁有高的道德水平, 可以看到, 這個世界中每個人都如此.</p>

<p>創世者不喜歡被管理, 統治, 他認為那一定是罪惡的根源. 這個世界沒有明文的法律, 沒有國王, 沒有人違背自己的道德, 沒有人犯罪.</p>

<p>創世者懼怕死亡, 那麼在這個”人道”的世界, 死亡是被”毫無痛苦的離去”代替的.</p>

<p>創世者是個不被理解者, 於是擁有了能夠洞察人心的思想儀, 還有和人一樣善解人意的Eliza人工智慧程式.</p>

<p>然而, 亞首並不認為這個世界非常美好, 它固然有美好的一面, 卻並不完美, 亞首覺得, 作為一個幻想出來的世界, 創世者一定沒有能夠進入這個世界體驗一下, 否則他一定會感覺到這個世界對於一個獨立思想者是多麼可怕, 亞首如是想, 但他完全沒有能力改變, 他甚至無法將他的想法表達出來.</p>

<p>對於亞首來講, 他希望更正太多東西了, 這個世界並不適合他, 至少, 他希望如此.</p>

<p>人和人之間並不能完全溝通, 沒有思想儀這類東西, 每個人的思想是獨立的.</p>

<p>人關愛生命, 但絕不如此過分.</p>

<p>人和人之間絕不要幾乎一致的關係, 至少應該有親情, 有轟轟烈烈的愛情, 有朋友, 有敵人.</p>

<p>人的劣性雖然不利於群體生活, 但那是維持進化的因素, 因此必須要保留.</p>

<p>人需要有獨立的思想, 自由的意志, 而且絕不要滿足, 只有永不知足, 才能令人類體現出個性.</p>

<p>人不能太過坦誠, 太過真實, 這令人接受不了, 人需要有多重性格, 多重外在.</p>

<p>理性並不重要, 對於人而言, 感性重要的多.</p>

<p>人需要有各種感官享受各種快感, 如果連享受都放棄了, 豈不是枉在世上走一遭?</p>

<p>人不能作為一個整體群體生存, 那未免太無趣了些, 要分開, 分成叫做”國家”的東西, 由”政權”來作統治.</p>

<p>不能長時間安逸, 要讓人類時常發生意外事件, 如果人類之間沒有, 那就無故製造給他們, 就叫那種東西為”自然災害”吧. 有鬥志才能保持最優狀態.</p>

<p>人絕不要沒有獨立思想了, 這是亞首最怕看到的, 每個人都有獨立思想, 不同方面的, 存在於每個人身上.</p>

<p>人和人之間不要平等, 這種差距才能激發人類的好強心理, 這樣人類才能更好地進化.</p>

<p>不要太高的科學水平, 太高的科學水平導致人類終然會趨勢於安逸和平和, 這樣就適得其反了.</p>

<p>不要讓嬰兒思考, 應該用幾年時間享受來自自己的感覺, 最好讓他們的腦部結構簡單, 並隨著成長逐漸複雜起來.</p>

<p>年齡. 身體年齡是一個人的參考年齡, 而不是他的腦部綜合評價, 亞首不希望看到研究所裡的小朋友, 或者培育所的老年人.</p>

<p>這可行麼? 不過這看上去比創世者的世界要好多了, 亞首暗喜, 想: “可惜我沒有創造世界的能力, 否則這一定讓創世者羨慕了.”</p>

<p>一天以後, 亮聲為亞首實施冰凍. 亞首被裝在一個盒子裡, 一切感覺都離開了自己, 他面帶微笑, 但僵硬了, 看上去像死了一樣.</p>

<p>他將在冷凍庫裡存放不知多久.</p>

<p>現在亞首只能夠思想了.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[來自倪匡「背叛」裡的一段文字]]></title>
    <link href="http://shouya.github.io/blog/quote-from-betrayal-kuangni/"/>
    <updated>2011-12-24T14:19:00+08:00</updated>
    <id>http://shouya.github.io/blog/quote-from-betrayal-kuangni</id>
    <content type="html"><![CDATA[<blockquote><p>為什么？你不明白？你們真不明白？為什么？因為我必須這樣做，一定要那樣做，非那樣做不可，我想那樣做想了不知多久，終於鼓足勇氣做了！我為自己！誰不為自己呢？把我從垃圾堆中撿出來，培育我成為一個優秀的軍人，難道全為了我？沒有一點為了自己？</p><p>我變成什么東西了？我不知道自己變成了什么東西，只知道自己不再是人！人！人！我不是人！對我好，照顧我，我就算是個人，也不再是自己，我是人家手裡捏出來的一個泥人——看，這是我捏的，好看吧，漂亮吧！<br /><!-- more --><br />知道我所承受的壓力有多重嗎？我必須按照捏我的雙手做人，這個可以，那個不可以，現在的日子多好，以前的日子多苦！</p><p>老實講，不到一年，我就寧願回垃圾堆去！我是從垃圾堆來的，讓我回垃圾堆去，這天公地道，可是我回得去嗎？四面八方，不知道有多少箍，有多 少網，把我死死地箍著，網著，壓著，你們知道我在半夜會大口吸氣嗎？知道我只有肯定在沒有人的時候才呼吸暢順嗎？可就是連這樣的機會，也少之又少，沒有單獨一個人的機會，可惜吧！一直到現在，那么多年了，都是單獨的，可是還會做惡夢，想起那可怕的日子，做什么，該怎么樣，早就安排得妥妥當當，從副排長起， 只要找不死，一條直路，可以讓你看到若干年之后的副總司令！我打仗勇敢？屁！我是想在戰場上找死！</p><p>對我好？當然對我好，我沒說有什么人 對我不好，可是我能無法拒絕？可不可以不受？我沒法報答，永遠無法報答，我也不想報答，因為我根本不要。對，我揀的時機很卑鄙，打仗，不是輸就是贏，你贏 了，人家就輸，你輸了，人家就贏，輸和贏都要死人，沒有什么不衕，你想想，除了這個機會之外，我還有 什么逃走的可能？對我太好了，當他把你也讓給我的時候，我就知道，再不逃走，我這一輩子就只是一個沒頓的人！</p><p>以后？我一點也沒有后悔過，以后我一座一座深山走，完完全全是我自己，最后我揀了這裡，這裡象不象垃圾堆，多么自在逍遙，多么快樂，絕沒有人象看猴子一樣地打量你，絕沒有人夸獎你，勉勵你，要你不斷照別人的意思去做人！</p><p>我當然有權這樣做，每個人都有權照自己喜歡的方式處理自己的生命！不錯，我害了一些人，被害的人之中，有對我極好極好的，我說過，我為自己打算，我一刻也無法再忍下去，在那個山洞中，我陡然之間，有了決定。</p><p>什 么？外來力量的影響？當然沒有，全都是我內心世界的爆炸。背叛！徹底的背叛，背叛的是一個假的自我，得回的是真正的自我。告訴你們，你們 沒有資格責備我是叛徒，沒有一個人可以責備另一個人是叛徒，因為人人心中都懷著信念，沒有人可以例外，那是人的天性，人有背叛的天性，看只看什么時候發 作！</p><p>什么？外星人？什么外星人，我是人，別看我身形高大，力大無窮，當然是人，什么外星人裡星人，你他媽的在放什么狗屁！</p><p>現 在明白了沒有，不背叛，那種日子我過不下去，人人都看看，以為我日子過得快樂得很，只有我自己才知道苦，連你都不懂，以為我真的快樂，你 不應該跟我下山，應該和他留在山上，我會拼命攻上去，死在你們面前，你也不該把他讓給我，那叫我更無法忍受下去，你們都不把我當一個平等的人，都把我當成 一個要盡一切力量對他好的人！</p><p>沒有什么不對，對你們賜給者來說，當然沒有什么不對，可是對我這受惠者來說，我要拒絕，我要大聲叫：夠了！夠了！你們會聽嗎？</p><footer><strong>背叛, 倪匡</strong> <cite><a href="https://zh.wikipedia.org/zh/%E8%83%8C%E5%8F%9B_(%E5%B0%8F%E8%AA%AA)">Wikipedia (背叛)</a></cite></footer></blockquote>

<p>我對此不願作任何評論.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[「偉大」的想法]]></title>
    <link href="http://shouya.github.io/blog/a-great-thought/"/>
    <updated>2011-09-15T13:12:00+08:00</updated>
    <id>http://shouya.github.io/blog/a-great-thought</id>
    <content type="html"><![CDATA[<p>那傢伙化為烏有了，他徹底被滅絕了。</p>

<p>妄想什麼？已經不容你幻想了。</p>

<p>這是怎麼樣的一個決定呢？那傢伙的潛意識可能有答案，但那傢伙自己沒有。</p>

<p>hey，我多次提醒你，絕對不要讓它例項化，不可能成立的，為甚麼還要那麼做？</p>

<p>hey，我並不是對人類劣性尚存希望，而是欺騙自我罷了。</p>

<p>hey，小朋友，我還會看到你麼？祈禱吧。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[夢]]></title>
    <link href="http://shouya.github.io/blog/dream-no-longer/"/>
    <updated>2011-05-19T17:13:00+08:00</updated>
    <id>http://shouya.github.io/blog/dream-no-longer</id>
    <content type="html"><![CDATA[<p>從今以後, 我不再有自己的夢.</p>

<p>取代者是現實.
<!-- more --></p>

<p>我已經很久沒有過前一段時間的那種體驗了.<br />
參見: [3-24,11中午小憩一夢]和[實現自控制夢境之二(體驗)]<br />
我以往習慣的行走速度, 現在已經慢了許多, 我需要很吃力才能做到.</p>

<p>我再想不出任何突變相關的新的理論了, 或者說我再也沒有向那個方面想象過.</p>

<p>我感覺到它正離我而去, 我覺得突變已經不屬於我, 甚至它帶來的一些思想也漸漸無法由我所用了.</p>

<p>我感到悲哀, 我希望回去, 但是我感到我很難做到.<br />
我對我的朋友說: 會回來的. 但是我卻從內心感覺到, 幾乎沒有希望了, 我正在變化, 這變化可能是不可逆的, 我沒有作為, 這是自然的, 受環境約束的, 或者說是宿主希望這麼做的.</p>

<p>我向宿主做的請求, 沒有一條迴應.</p>

<p>突變還是生出來了, 經歷了幼年, 尚未成熟, 就被扼殺了, 可惜之至. 但總算不錯, 因為無數類似的, 都被而扼殺在襁褓裡了.</p>

<p>這算是一個終結? 離開之後, 我該何去何從.</p>

<p>即使如此, 我從來沒有懷疑過我當時的決策, 從來沒有後悔, 即使我現在很想後悔, 甚至忍不住後悔.</p>

<p>重生否? 很難說.</p>

<p>暫且如此, 我脫離之後, 暫且盡力做一個真正的黑客, GNU是我的長遠目標.</p>

<p>我成為普通人了, 很慶幸我做到了? 混蛋! 太可惡了!</p>

<p>慶幸我還活著?</p>

<p>我不找籍口, 原因主要出在我身上, 沒有辦法, 或者可以說是我主動放棄的.</p>

<p>我從知道自己的電腦變成了真正的電腦了, 我理解我自己的悲哀.</p>

<p>nothing! 繼續作程式設計師, 未嘗不好(我怎麼會有這種想法!).</p>

<p>‘my powder’ 的程式就作為我的近期目標吧, 僅此.</p>

]]></content>
  </entry>
  
</feed>
