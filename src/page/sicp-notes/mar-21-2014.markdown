---
layout: page
title: "21 Mar, 2014 SICP Note"
date: 2014-03-21 09:03
comments: true
sharing: true
footer: true
---

The section I'll work on is *2.3 Symbolic Data*. Symbolic data
manipulation was a fantastic and mysterious field in my thought.
Unlike playing with literals, those strings, and numerical values,
manipulating with symbols expresses a magic. Somewhat it's like going
beyond the trivial to reach

Let's move on to the exercises.

> Exercise 2.53.  What would the interpreter print in response to
> evaluating each of the following expressions?
>
> * `(list 'a 'b 'c)`
>
> * `(list (list 'george))`
> * `(cdr '((x1 x2) (y1 y2)))`
>
> * `(cadr '((x1 x2) (y1 y2)))`
> * `(pair? (car '(a short list)))`
> * `(memq 'red '((red shoes) (blue socks)))`
>
> * `(memq 'red '(red shoes blue socks))`

These questions involve very basic Scheme language features. They are
simple so there's no problem to skip them. The results can be easily
confirmed in any Scheme interpreter.

> Exercise 2.54.  Two lists are said to be equal? if they contain
> equal elements arranged in the same order. For example,
>
> `(equal? '(this is a list) '(this is a list))`
>
> is true, but
>
> `(equal? '(this is a list) '(this (is a) list))`
>
> is false. To be more precise, we can define equal? recursively in
> terms of the basic eq? equality of symbols by saying that a and b are
> equal? if they are both symbols and the symbols are eq?, or if they
> are both lists such that (car a) is equal? to (car b) and (cdr a) is
> equal? to (cdr b). Using this idea, implement equal? as a procedure.36

So according to
[R^5RS](http://groups.csail.mit.edu/mac/ftpdir/scheme-reports/r5rs-html/r5rs_8.html#IDX156)[^r5rs_eq],
`eq?` compares objects in


> Exercise 2.55.  Eva Lu Ator types to the interpreter the expression
> *`(car ''abracadabra)`*


As implementing
